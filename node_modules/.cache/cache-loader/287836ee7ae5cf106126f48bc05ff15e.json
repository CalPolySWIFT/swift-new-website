{"remainingRequest":"C:\\Users\\internet\\swift-website-2021\\node_modules\\babel-loader\\lib\\index.js??ref--8-1!C:\\Users\\internet\\swift-website-2021\\src\\pages\\eboard.js","dependencies":[{"path":"C:\\Users\\internet\\swift-website-2021\\src\\pages\\eboard.js","mtime":1642784532230},{"path":"C:\\Users\\internet\\swift-website-2021\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625960856990},{"path":"C:\\Users\\internet\\swift-website-2021\\node_modules\\babel-loader\\lib\\index.js","mtime":1625960856734}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}