{"remainingRequest":"C:\\Users\\internet\\swift-website-2021\\node_modules\\babel-loader\\lib\\index.js??ref--8-1!C:\\Users\\internet\\swift-website-2021\\src\\pages\\about.js","dependencies":[{"path":"C:\\Users\\internet\\swift-website-2021\\src\\pages\\about.js","mtime":1642784532199},{"path":"C:\\Users\\internet\\swift-website-2021\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625960856990},{"path":"C:\\Users\\internet\\swift-website-2021\\node_modules\\babel-loader\\lib\\index.js","mtime":1625960856734}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydCBMYXlvdXQgZnJvbSdAdGhlbWUvTGF5b3V0JztpbXBvcnQgY2xzeCBmcm9tJ2Nsc3gnO2ltcG9ydCBzdHlsZXMgZnJvbSIuL3N0eWxlcy5tb2R1bGUuY3NzIjtpbXBvcnR7ZmFEYXRhYmFzZSxmYUhhbmRzaGFrZSxmYVNoaWVsZEFsdH1mcm9tJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucyc7aW1wb3J0e0ZvbnRBd2Vzb21lSWNvbn1mcm9tJ0Bmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZSc7ZnVuY3Rpb24gTWlzc2lvbigpe3JldHVybi8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLHtjbGFzczpjbHN4KHN0eWxlcy5zZWN0aW9uUGFkZGluZyl9LC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzZWN0aW9uIix7Y2xhc3M6ImNvbnRhaW5lciJ9LC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLHtjbGFzczoicm93In0sLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIse2NsYXNzOiJjb2wgY29sLS0xMiBjZW50ZXJlZCJ9LC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLHtjbGFzczpjbHN4KCJwYWRkaW5nLS1zbSBjZW50ZXJlZCIpfSwvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgicCIsbnVsbCwiV2UgYXJlIFN0dWRlbnRzIHdpdGggYW4gSW50ZXJlc3QgaW4gdGhlIEZ1dHVyZSBvZiBUZWNobm9sb2d5LCBvciBTV0lGVCwgdGhlIHByZW1pZXIgaW5mb3JtYXRpb24gdGVjaG5vbG9neSBhbmQgc2VjdXJpdHkgb3JnYW5pemF0aW9uIGF0IENhbCBQb2x5IFBvbW9uYS4gV2UgZm9jdXMgb24gZGVsaXZlcmluZyB0aGUgcHJhY3RpY2FsIHRlY2huaXF1ZXMsIHJlc291cmNlcywgYW5kIHdvcmtzaG9wcyB0byBzdWNjZWVkIHdpdGhpbiB0aGUgZmllbGRzIG9mIGN5YmVyc2VjdXJpdHksIHN5c3RlbSBhZG1pbmlzdHJhdGlvbiwgYW5kIG5ldHdvcmtpbmcgLSBmb3Igc3R1ZGVudHMsIGJ5IHN0dWRlbnRzLiBXZSBzdHJpdmUgdG8gaW5zcGlyZSBzdHVkZW50cyB0byB0YWtlIHRoZWlyIGxlYXJuaW5nIGJleW9uZCB0aGUgY2xhc3Nyb29tIGFuZCBwcmVwYXJlIG1lbWJlcnMgdG8gZW5kZWF2b3IgaW50byB0aGVpciBwcm9mZXNzaW9uYWwgY2FyZWVycyB3aXRoIG1lbnRvcmluZyBmcm9tIGluZHVzdHJ5IHByb2Zlc3Npb25hbHMgd29ya2luZyBpbiBDcm93ZFN0cmlrZSwgTWFuZGlhbnQsIFRlc2xhLCBhbmQgbWFueSBvdGhlciBjb21wYW5pZXMuIikpKSkpKTt9Ly8gZnVuY3Rpb24gTWlzc2lvbigpewovLyAgIHJldHVybigKLy8gICAgIDxkaXYgY2xhc3M9e2Nsc3goc3R5bGVzLnNlY3Rpb25QYWRkaW5nKX0+Ci8vICAgICAgIDxzZWN0aW9uIGNsYXNzPSJjb250YWluZXIiPgovLyAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+Ci8vICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wgY29sLS0xMiBjZW50ZXJlZCI+Ci8vICAgICAgICAgICAgIHsvKiA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhRGF0YWJhc2V9IGNsYXNzPXtjbHN4KCJjb3JlLWljb25zIil9IC8+ICovfQovLyAgICAgICAgICAgICB7LyogPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYURhdGFiYXNlfSBjbGFzc05hbWU9e2Nsc3goc3R5bGVzLnNlY3Rpb25JY29uKX0vPiAqL30KLy8gICAgICAgICAgICAgPGRpdiBjbGFzcz17Y2xzeCgicGFkZGluZy0tc20gY2VudGVyZWQiKX0+Ci8vICAgICAgICAgICAgICAgPHA+V2UgYXJlIFN0dWRlbnRzIHdpdGggYW4gSW50ZXJlc3QgaW4gdGhlIEZ1dHVyZSBvZiBUZWNobm9sb2d5LCB0aGUgcHJlbWllciBpbmZvcm1hdGlvbiB0ZWNobm9sb2d5IGFuZCBzZWN1cml0eSBvcmdhbml6YXRpb24gYXQgQ2FsIFBvbHkgUG9tb25hLiAKLy8gICAgICAgICAgICAgICBXZSBhaW0gdG8gaW5zcGlyZSBhbmQgY3JlYXRlIGEgZ2VuZXJhdGlvbiBvZiBzdHVkZW50cyB3aG8gYXJlIGF3YXJlIGFuZCBjYXBhYmxlIG9mIGRlYWxpbmcgd2l0aCB0aGUgZHluYW1pYyBsYW5kc2NhcGUgb2YgaW5mb3JtYXRpb24gc2VjdXJpdHksIAovLyAgICAgICAgICAgICAgIGN5YmVyIHNlY3VyaXR5LCBhbmQgaW5mb3JtYXRpb24gdGVjaG5vbG9neS4gVG9nZXRoZXIgd2UgY2FuIGJ1aWxkIGEgc2VjdXJlIGZ1dHVyZSB0aHJvdWdoIHRyYWluaW5nLCBleHBlcmllbmNlLCBhbmQgZWR1Y2F0aW9uLiAKLy8gICAgICAgICAgICAgICBMZXQncyB3b3JrIHRvZ2V0aGVyIHRvIGNyZWF0ZSBhbmQgbGVhcm4gc29tZXRoaW5nIG5ldy4gRG9uJ3QganVzdCB0YWtlIG91ciB3b3JkIGZvciBpdC4gCi8vICAgICAgICAgICAgICAgV2hldGhlciB5b3UgYXJlIGFuIGluZHVzdHJ5IHByb2Zlc3Npb25hbCBvciBhIGN1cmlvdXMgc3R1ZGVudCwgdGFrZSBhIGxvb2sgYXQgb3VyIHByZXZpb3VzIGV2ZW50cy4gCi8vICAgICAgICAgICAgICAgV2hpbGUgeW91J3JlIGF0IGl0LCBjb21lIHRvIG9uZSBvZiBvdXIgdW5pcXVlIHdvcmtzaG9wcywgdHJhaW5pbmdzLCBvciBjb25mZXJlbmNlcyBhbmQgYmVjb21lIHBhcnQgb2YgU1dJRlQuPC9wPgovLyAgICAgICAgICAgICA8L2Rpdj4KLy8gICAgICAgICAgIDwvZGl2PgovLyAgICAgICAgIDwvZGl2PgovLyAgICAgICA8L3NlY3Rpb24+Ci8vICAgICA8L2Rpdj4KLy8gICApCi8vIH0KLy8gCi8vIGZ1bmN0aW9uIE1lc3NhZ2UoKSB7Ci8vICAgcmV0dXJuICgKLy8gICAgIDxkaXYgY2xhc3M9e2Nsc3goc3R5bGVzLnNlY3Rpb25QYWRkaW5nLCAic2VjdGlvbi1iYWNrZ3JvdW5kLWNvbG9yIil9PgovLyAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgovLyAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwYWRkaW5nLS1sZyI+Ci8vICAgICAgICAgICA8ZGl2IGNsYXNzPXsiY29sIGNvbC0tNiBjZW50ZXJlZCJ9PgovLyAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm1lc3NhZ2V9PgovLyAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9e3N0eWxlcy5oZWFkaW5nfT5XaGF0IFdlIERvPC9oMT4KLy8gICAgICAgICAgICAgICA8cD4KLy8gICAgICAgICAgICAgICBCZWluZyBhIHBhcnQgb2YgU1dJRlQgaXMgbXVjaCBtb3JlIHRoZW4gYmVpbmcgYSBwYXJ0IG9mIGFuIG9yZ2FuaXphdGlvbi4gU1dJRlQgaXMgYSBjb21tdW5pdHkuIAovLyAgICAgICAgICAgICAgIFdlIGJlbGlldmUgc3Ryb25nbHkgaW4gcHJvdmlkaW5nIHN0dWRlbnRzIHdpdGggb3Bwb3J0dW5pdGllcyB0aGF0IGNhbiBiZSBvYnRhaW5lZCBub3doZXJlIGVsc2UgYW5kIGhlbHAgCi8vICAgICAgICAgICAgICAgYnVpbGQgc2tpbGxzIHRocm91Z2ggb24tY2FtcHVzIGFuZCBvZmYtY2FtcHVzIGV2ZW50cy4gV2UgYmVsaWV2ZSBpbiBwcm92aWRpbmcgYW5kIHVuZGVyc3RhbmRpbmcgCi8vICAgICAgICAgICAgICAgdGhlIHNraWxscyByZXF1aXJlZCB0byBleGNlbCBpbiB0aGUgaW5kdXN0cnkgdGhyb3VnaCB3b3Jrc2hvcHMgYW5kIGFjdGl2aXRpZXMgdGhhdCBidWlsZCBza2lsbHMgYW5kIAovLyAgICAgICAgICAgICAgIGZyaWVuZHNoaXBzLiBUaHJvdWdob3V0IHRoZSB5ZWFyIFNXSUZUIHJ1bnMgd2Vla2x5IG1lZXRpbmdzIGFsdGVybmF0aW5nIGJldHdlZW4gd29ya3Nob3AgdHJhaW5pbmdzIGFuZCAKLy8gICAgICAgICAgICAgICBkaXNjdXNzaW9ucyBwcm92aWRpbmcgc3R1ZGVudHMgYSB3YXkgdG8gYnVpbGQgdXAgdGhlaXIgc2tpbGxzIGluIGFuIGFsdGVybmF0aW5nIGN5Y2xlIG9mIG1lZXRpbmdzLgovLyAgICAgICAgICAgICAgIDwvcD4KLy8gICAgICAgICAgICAgPC9kaXY+Ci8vICAgICAgICAgICA8L2Rpdj4KLy8gICAgICAgICAgIDxkaXYgY2xhc3M9eyJjb2wgY29sLS02IGNlbnRlcmVkIn0+Ci8vICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWVzc2FnZX0+Ci8vICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9e3N0eWxlcy5oZWFkaW5nfT5FdmVudHM8L2gxPgovLyAgICAgICAgICAgICAgIDxwPgovLyAgICAgICAgICAgICAgIFNXSUZUIGhvc3RzIGEgbnVtYmVyIG9mIGZyZWUgd29ya3Nob3BzIHRoYXQgdGVhY2ggYSB2YXJpZXR5IG9mIHNraWxscyBpbmNsdWRpbmcgTGludXggaW5zdGFsbGF0aW9uLCAKLy8gICAgICAgICAgICAgICBuZXR3b3JrIHNlY3VyaXR5LCBhbmQgcGVuZXRyYXRpb24gdGVzdGluZy4gV29ya3Nob3BzIGFyZSBoYW5kcy1vbiBhbmQgYXJlIGRlc2lnbmVkIHRvIGxldCAKLy8gICAgICAgICAgICAgICBtZW1iZXJzIGdldCBoYW5kcy1vbiBleHBlcmllbmNlIHdpdGggcmVhbCB0ZWNobm9sb2d5LiBXZSBlbmNvdXJhZ2Ugb3VyIG1lbWJlcnMgdG8gYXR0ZW5kIGFuZCBydW4gd29ya3Nob3BzIGFuZCBldmVudHMuIAovLyAgICAgICAgICAgICAgIFRocm91Z2ggdGhlc2UgZXhjaGFuZ2Ugb2Yga25vd2xlZGdlIHdlIGJ1aWxkIHNraWxscyBhbmQgZm9ybSBwYXJ0bmVyc2hpcHMgZmFyIGJleW9uZCB0aGUgY2FtcHVzIHRvIHRoZSAKLy8gICAgICAgICAgICAgICBpbmR1c3RyeSBhbmQgcHJvZmVzc2lvbmFscyBhdCBsYXJnZS4gV2UgaGF2ZSBhIGxvbmcgaGlzdG9yeSBvZiBzdGFydGluZywgcnVubmluZyBldmVudHMsIGFuZCB0aGF0IGFyZSAKLy8gICAgICAgICAgICAgICBrbm93biBmb3IgdGhlaXIgaW4tZGVwdGggbmF0dXJlIGFuZCBjb3ZlciB0aGUgZnVsbCBicmVhZHRoIG9mIHRoZSBpbmR1c3RyeS4KLy8gICAgICAgICAgICAgICA8L3A+Ci8vICAgICAgICAgICAgIDwvZGl2PgovLyAgICAgICAgICAgPC9kaXY+Ci8vICAgICAgICAgPC9kaXY+Ci8vICAgICAgIDwvZGl2PgovLyAgICAgPC9kaXY+Ci8vICAgKTsKLy8gfQpmdW5jdGlvbiBBYm91dCgpe3JldHVybi8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExheW91dCx7dGl0bGU6IkhlbGxvIn0sLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIse3N0eWxlOntkaXNwbGF5OidmbGV4JyxqdXN0aWZ5Q29udGVudDonY2VudGVyJyxhbGlnbkl0ZW1zOidjZW50ZXInLHBhZGRpbmdUb3A6JzEwMHB4JywvLyBoZWlnaHQ6ICcyNXZoJywKZm9udFNpemU6JzIwcHgnfX0sLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImgxIixudWxsLCJTV0lGVCdzIE1pc3Npb24iKSksLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoIm1haW4iLG51bGwsLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWlzc2lvbixudWxsKSkpO31leHBvcnQgZGVmYXVsdCBBYm91dDs="},null]}